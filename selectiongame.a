    .data
# data for display messages
welcome:    .asciiz "Welcome to the Selection Game!\nWould you like Option #1 or Option #2?\n"
op1:        .asciiz "Option #1 chosen. Please enter a number between 1 and 12:\n"
op1pt2:     .asciiz "Great! Here are countries of South America:\n"
op2:        .asciiz "Option #2 chosen.  Please enter a number:\n"
op2pt2:     .asciiz "Great! Here is an array of its binary digits in order:\n"

# data for option #1
arg:    .asciiz "Argentina "
bol:    .asciiz "Bolivia "
bra:    .asciiz "Brazil "
chi:    .asciiz "Chile "
col:    .asciiz "Colombia "
ecu:    .asciiz "Ecuador "
guy:    .asciiz "Guyana "
par:    .asciiz "Paraguay "
per:    .asciiz "Peru "
sur:    .asciiz "Suriname "
uru:    .asciiz "Uruguay "
ven:    .asciiz "Venezuela "
countries:   .word   arg bol bra chi col ecu guy par per sur uru ven
iterator:    .word      0

# data for option #2
start:      .asciiz "[ "
end:        .asciiz "]"
spacing:    .asciiz " "
input:      .word       0

    .text
main:
    move $a0, $t0           # move the welcome message where SPIM can see it
    la $a0, welcome         # put the welcome message in $a0
    li $v0, 4               # get ready to print
    syscall                 # execute the call

    li $v0, 5               # get ready to read user input
    syscall                 # execute the call
    move $t0, $v0           # move the input into $t0

    beq $t0, 1, case1       # if $t0 = 1, go to case1
    beq $t0, 2, case2       # if $t0 = 2, go to case2

case1:
    move $a0, $t0           # move the message where SPIM can see it
    la $a0, op1             # put the message in $a0
    li  $v0, 4              # get ready to print
    syscall                 # execute the call

    li $v0, 5               # get ready to read user input
    syscall                 # execute the call
    move $t2, $v0           # move the input into $t0

    move $a0, $t0           # move the message where SPIM can see it
    la $a0, op1pt2          # put the message in $a0
    li  $v0, 4              # get ready to print
    syscall                 # execute the call

    li $v0, 4               # get ready to print
    la $a0, start           # put the message where SPIM can see it
    syscall                 # execute the call

    la $t0, countries       # $t0 holds countries' address
    lw $t1, iterator		# $t1 holds iterator
    addi $t2, $t2, -1       # decrease $t2 by 1

    beq $0, $0, floop       # enter the for loop to print the array

floop:
    bgt $t1, $t2, done      # if out of bounds, exit
    sll $t3, $t1, 2         # t3 holds the locations
    addu $t3, $t3, $t0      # find next element
    lw $a0, 0($t3)          # load up the country

    li $v0, 4               # get ready to print
    syscall                 # execute the call

    addi $t1, $t1, 1        # increment iterator
    j floop		            # jump to top of for loop

case2:
    la $a0, op2             # put the message where SPIM can see it
    li $v0, 4               # get ready to print
    syscall                 # execute the call

    li $v0, 5               # get SPIM ready to read user input
    syscall                 # execute the call
    
    sw $v0, input           # store input from user in $v0

    li $v0, 4               # get ready to print
    la $a0, op2pt2          # put the message where SPIM can see it
    syscall                 # execute the call

    li $v0, 4               # get ready to print
    la $a0, start           # put the message where SPIM can see it
    syscall                 # execute the call

    lw $a0, input           # copy the user input into a0  
    jal findBinary          # jump the recursive binary function

    j done 

findBinary:
    subu $sp, $sp, 8        # make space for the stack
    sw $ra, 0($sp)          # space for $ra
    sw $s0, 4($sp)          # space for $s0
    
    # terminating condition: if we hit 0, exit the loop
    beq $a0, 0, binaryEnd   # if $a0 == 0 then go to binaryEnd
    move $s0, $a0           # put $a0 where it will last the recursion
   
    # if still in, divide $a0 by 2
    li $t3, 2               # put 2 in $t3
    div $a0, $t3            # divide $a0 by 2
    move $s0, $a0           # store the value of $a0 in $s0
    mflo $a0                # store the division result in $a0

    jal findBinary          # execute the recursive call

    div $s0, $t3            # divide the value of $s0 by 2
    mfhi $a0                # store the remainder result in $a0
    li  $v0, 1              # get ready to print
    syscall                 # execute the call

    move $s0, $a0           # store the value of $a0 in $s0
    la $a0, spacing         # put the space where SPIM can see it
    li $v0, 4               # get ready to print
    syscall                 # execute the call

binaryEnd:
    lw $ra, 0($sp)          # put return address back
    lw $s0, 4($sp)          # put $s0 back
    addu $sp, $sp, 8        # put stack pointer back
    jal $ra                 # undo stack or go back to main

done:
    li $v0, 4               # get ready to print
    la $a0, end             # put the message where SPIM can see it
    syscall  

    li $v0, 10              # get ready to exit
    syscall                 # execute the call


    
    


    